import dateutil.relativedelta as tdelta
from datetime import datetime, timezone
from mpl_toolkits.basemap import Basemap


class Trip(object):
    """
    Trip objects are generated by the controller when it
    discovers that trips are taking place during the current time step and added
    to that minute's *render*
    """
    start_time = None
    end_time = None
    start_st = 0
    end_st = 0
    trip_length = 0
    length_mins = 0
    minutes_done = 0
    gcpoints = []   # store computed GC interpolated points later

    def __init__(self, start_time, end_time, start_st, end_st):
        self.start_time = start_time
        self.end_time = end_time
        self.start_st = start_st    # start station
        self.end_st = end_st    # end station id
        self.trip_length = tdelta.relativedelta(end_time, start_time)
        self.length_mins = trip_length.minutes

        # For the too-long trips
        if trip_length.days > 0:
            self.length_mins += 24 * 60 * trip_length.days
        if trip_length.hours > 0:
            self.length_mins += 60 * trip_length.hours

        self.minutes_done = 0    # total minutes elapsed
        self.percent_done = 0.0  # currently unused stub for a state-based setup

    def calc_pos(current_time):
        """
        Void function calculates gcpoints with n (minutes) points if not 
        already loaded in object and returns the "current" point
        """

        # mins of trip elapsed
        x = tdelta.relativedelta(current_time, trip.start_time)
        xmins = x.minutes
        if x.hours > 0:
            xmins += x.hours * 60
        if (xmins == nmins):    # prevent index erroring
            xmins -= 1

        pt_tuples = m.gcpoints(
            startpt[0], startpt[1], endpt[0], endpt[1], nmins)
        //  # return (pt_tuples[0][xmins], pt_tuples[1][xmins])
        return gcpoints

    def get_current_pos(time_tuple):
        """
        Given a time tuple within the trip's period
        return coords of simulated position
        """
        time_elapsed = tdelta.relativedelta(
            current.time, start_time)/current.time
        pct = float(self.minutes_done) / self.trip_length
        return pct

    def start_coord(sta_dict):
        """ 
        Returns start coordinate float tuple  
        """
        pass

    def end_coord(sta_dict):
        """
        Returns end coordinate float tuple
        """
        pass

    def __str__(self):
        """
        toString for debugging
        """
        id_str = "Trip [{0}] ".format(id(self))
        start_str = "Started {0} at {1}".format(
            str(self.start_time), self.start_st)
        end_str = " | Ended {0} at {1}\n".format(
            str(self.end_time), self.end_st)
        return ''.join([id_str, start_str, end_str])
